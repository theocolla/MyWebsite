const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const path = require('path');
const { spawn } = require('child_process');

const app = express();
const PORT = process.env.PORT || 3001;

// Middleware para tratamento de erros global
app.use((err, req, res, next) => {
    console.error('Application error:', err.stack);
    res.status(500).json({ error: 'Internal server error' });
});

// Middleware para logging de requisiÃ§Ãµes
app.use((req, res, next) => {
    console.log(`${new Date().toISOString()} - ${req.method} ${req.url}`);
    next();
});

// Tratamento de exceÃ§Ãµes nÃ£o capturadas
process.on('uncaughtException', (err) => {
    console.error('Uncaught exception:', err);
    // Keep the server running even with unhandled errors
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('Unhandled promise rejection:', reason);
    // Keep the server running even with rejected promises
});

// Middleware
app.use(cors());
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// Configurar pasta de arquivos estÃ¡ticos
app.use('/js', express.static(path.join(__dirname, 'public/js')));
app.use('/css', express.static(path.join(__dirname, 'public/css')));
app.use(express.static(path.join(__dirname, 'templates')));

// Dados dos produtos
const products = [
  {
    id: 1,
    name: "Runner Pro Sneakers",
    price: 199.90,
    image: "https://rmilet.vteximg.com.br/arquivos/ids/8557620-593-593/Tenis-de-Corrida-Preto-Index-III-%7C-Olympikus-Tamanho--37---Cor--PRETO-0.jpg?v=638637392171030000",
    sizes: [7, 8, 9, 10, 11, 12],
    description: "Professional running sneakers with advanced cushioning system."
  },
  {
    id: 2,
    name: "Urban Style Sneakers",
    price: 159.90,
    image: "https://images.tcdn.com.br/img/img_prod/1112850/tenis_masculino_urbano_em_couro_branco_pegada_2371_1_5b5e5f1a0a62c7547698f65c0082b655.jpg",
    sizes: [7, 8, 9, 10, 11],
    description: "Stylish urban sneakers perfect for casual everyday wear."
  },
  {
    id: 3,
    name: "Performance X Sneakers",
    price: 229.90,
    image: "https://aramisnova.vtexassets.com/arquivos/ids/1234688-510-765",
    sizes: [8, 9, 10, 11, 12],
    description: "High-performance athletic footwear designed for intensive training."
  },
  {
    id: 4,
    name: "Premium Skate Sneakers",
    price: 179.90,
    image: "https://images.tcdn.com.br/img/img_prod/775752/tenis_ous_skate_emergente_preto_verde_latex_essencial_3481_1_73ffdd958454f32eea1ace5cb5d59355.jpg",
    sizes: [7, 8, 9, 10, 11, 12],
    description: "Premium skate sneakers with enhanced grip and durability."
  },
  {
    id: 5,
    name: "Trail Walker Sneakers",
    price: 219.90,
    image: "https://a-static.mlcdn.com.br/1500x1500/tenis-de-trilha-sapato-adventure-confortavel-solado-tratorado-senhorelle/trailshoes/40355a4ae2fa11eda9124201ac185033/24ae42325d469fd99d60250b8ef9fb7d.jpeg",
    sizes: [8, 9, 10, 11, 12],
    description: "Durable hiking sneakers perfect for outdoor adventures."
  },
  {
    id: 6,
    name: "Fashion Wave Sneakers",
    price: 169.90,
    image: "https://cdn.shopify.com/s/files/1/0570/8867/1938/files/Designsemnome_8_480x480.png?v=1673532789",
    sizes: [7, 8, 9, 10, 11],
    description: "Trendy fashion sneakers for everyday style."
  }
];

// MÃ©todos de pagamento
const paymentMethods = [
  { id: 1, name: "Credit Card", icon: "ðŸ’³" },
  { id: 2, name: "Debit Card", icon: "ðŸ’³" },
  { id: 3, name: "PayPal", icon: "ðŸ“±" },
  { id: 4, name: "PicPay", icon: "ðŸ“±" }
];

// Rota para a pÃ¡gina inicial
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'templates', 'index.html'));
});

// Rotas da API
app.get('/api/products', (req, res) => {
    res.json(products);
});

app.get('/api/products/:id', (req, res) => {
    const productId = parseInt(req.params.id);
    const product = products.find(p => p.id === productId);
    
    if (product) {
        res.json(product);
    } else {
        res.status(404).json({ error: 'Product not found' });
    }
});

app.get('/api/payment-methods', (req, res) => {
    res.json(paymentMethods);
});

app.post('/api/checkout', (req, res) => {
    const { productId, size, paymentMethod } = req.body;
    
    if (!productId || !size || !paymentMethod) {
        return res.status(400).json({ error: 'Missing required fields' });
    }
    
    const product = products.find(p => p.id === parseInt(productId));
    if (!product) {
        return res.status(404).json({ error: 'Product not found' });
    }
    
    if (!product.sizes.includes(parseInt(size))) {
        return res.status(400).json({ error: 'Size not available' });
    }
    
    const payment = paymentMethods.find(pm => pm.id === parseInt(paymentMethod));
    if (!payment) {
        return res.status(400).json({ error: 'Invalid payment method' });
    }
    
    res.json({
        success: true,
        message: 'Order processed successfully',
        order: {
            product: product.name,
            size: size,
            paymentMethod: payment.name,
            total: product.price
        }
    });
});

// Rota para o chatbot
app.post('/ask', (req, res) => {
    const { question } = req.body;
    if (!question) {
        return res.status(400).json({ error: 'Question not provided' });
    }

    // Executa o script Python do chatbot
    const pythonProcess = spawn('python', ['app.py', question]);

    let responseData = '';
    let errorData = '';

    pythonProcess.stdout.on('data', (data) => {
        responseData += data.toString();
    });

    pythonProcess.stderr.on('data', (data) => {
        errorData += data.toString();
    });

    pythonProcess.on('close', (code) => {
        if (code !== 0) {
            return res.status(500).json({ error: 'Error processing your question' });
        }
        res.json({ answer: responseData.trim() });
    });
});

// InicializaÃ§Ã£o do servidor com tratamento de erro
const server = app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
}).on('error', (err) => {
    console.error('Error starting server:', err);
});

// Tratamento de sinais de tÃ©rmino
process.on('SIGTERM', gracefulShutdown);
process.on('SIGINT', gracefulShutdown);

function gracefulShutdown() {
    console.log('Starting graceful server shutdown...');
    server.close(() => {
        console.log('Server closed successfully');
        process.exit(0);
    });

    // If server doesn't close in 10 seconds, force shutdown
    setTimeout(() => {
        console.error('Could not close server gracefully, forcing shutdown');
        process.exit(1);
    }, 10000);
} 
